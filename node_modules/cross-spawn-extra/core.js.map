{"version":3,"file":"core.js","sourceRoot":"","sources":["core.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2018/9/25/025.\n */\n\n// @ts-ignore\nimport CallableInstance from 'callable-instance2';\nimport CrossSpawn from 'cross-spawn';\nimport Bluebird from 'bluebird';\nimport child_process from 'child_process';\nimport stream from 'stream';\nimport stripAnsi from 'strip-ansi';\n\nexport { Bluebird }\n\nimport {\n\tSpawnOptions,\n\tSpawnSyncOptions,\n\tSpawnSyncOptionsWithBufferEncoding,\n\tSpawnSyncOptionsWithStringEncoding,\n} from \"./type\";\n\nexport const SYM_CROSS_SPAWN = Symbol('cross-spawn');\nexport const SYM_BLUEBIRD = Symbol('bluebird');\n\nexport {\n\tSpawnOptions,\n\tSpawnSyncOptions,\n\tSpawnSyncOptionsWithBufferEncoding,\n\tSpawnSyncOptionsWithStringEncoding,\n}\n\nexport type SpawnSyncReturns<T = Buffer> = child_process.SpawnSyncReturns<T> & {\n\n\t/**\n\t * fake async api, this not same as async return\n\t */\n\tthen<R>(fn: (child: child_process.SpawnSyncReturns<T>) => R): Bluebird<R>,\n\n\terror: ISpawnASyncError,\n};\n\nexport type SpawnASyncReturns<T = Buffer> = child_process.SpawnSyncReturns<T> & child_process.ChildProcess & {\n\n\terror: ISpawnASyncError,\n\tstatus: number,\n\n\t/**\n\t * a buffer list by realy order of output (include stdout , stderr)\n\t */\n\t_output?: Buffer[],\n\n\t/**\n\t * source stderr stream\n\t */\n\tstderrStream?: stream.Readable,\n\t/**\n\t * source stdout stream\n\t */\n\tstdoutStream?: stream.Readable,\n};\n\nexport type SpawnASyncReturnsPromise<T = Buffer> = Bluebird<SpawnASyncReturns<T>> & {\n\n\t/**\n\t * can do anything as u want like source spawn do\n\t */\n\tchild?: SpawnASyncReturns<T>,\n\n};\n\n/**\n * Error Class\n */\nexport interface ISpawnASyncError<R = SpawnASyncReturns> extends Error\n{\n\tmessage: string,\n\tcode?: string,\n\terrno?: string,\n\tsyscall?: string,\n\tpath?: string,\n\tspawnargs?: string[],\n\n\tchild?: R,\n}\n\ninterface CallableInstance<R = SpawnASyncReturnsPromise>\n{\n\t(command: string, args?: string[], options?: SpawnOptions): SpawnASyncReturnsPromise\n\t<T = Buffer>(command: string, args?: string[], options?: SpawnOptions): SpawnASyncReturnsPromise<T>\n\t<T = Buffer>(command: string, args?: any[], options?: SpawnOptions): SpawnASyncReturnsPromise<T>\n\t<T = Buffer>(command: string, args?: any[]): SpawnASyncReturnsPromise<T>\n\t<T = Buffer>(command: string): SpawnASyncReturnsPromise<T>\n\n\t(command: string, args?: string[], options?: SpawnOptions): SpawnASyncReturnsPromise\n\t(command: string, args?: any[], options?: SpawnOptions): SpawnASyncReturnsPromise\n\t(command: string, args?: any[]): SpawnASyncReturnsPromise\n\t(command: string): SpawnASyncReturnsPromise\n\n\t<T = Buffer>(...argv): SpawnASyncReturnsPromise<T>\n\t(...argv): SpawnASyncReturnsPromise\n}\n\nexport class CrossSpawnExtra<R = SpawnASyncReturnsPromise> extends CallableInstance<R>\n{\n\tprotected readonly [SYM_CROSS_SPAWN]: typeof CrossSpawn;\n\tprotected readonly [SYM_BLUEBIRD]: typeof Bluebird;\n\n\tpublic readonly default = this;\n\n\t/**\n\t * sync version of child_process.spawnSync(command[, args][, options])\n\t */\n\tsync(command: string): SpawnSyncReturns<Buffer>;\n\tsync(command: string, options?: SpawnSyncOptionsWithStringEncoding): SpawnSyncReturns<string>;\n\tsync(command: string, options?: SpawnSyncOptionsWithBufferEncoding): SpawnSyncReturns<Buffer>;\n\tsync(command: string, options?: SpawnSyncOptions): SpawnSyncReturns<Buffer>;\n\tsync(command: string, args?: Array<string>, options?: SpawnSyncOptionsWithStringEncoding): SpawnSyncReturns<string>;\n\tsync(command: string, args?: Array<string>, options?: SpawnSyncOptionsWithBufferEncoding): SpawnSyncReturns<Buffer>;\n\tsync(command: string, args?: Array<string>, options?: SpawnSyncOptions): SpawnSyncReturns<Buffer>;\n\tsync<T = Buffer>(...argv): SpawnSyncReturns<T>\n\tsync<T = Buffer>(...argv): SpawnSyncReturns<T>\n\t{\n\t\t// @ts-ignore\n\t\tlet child = this[SYM_CROSS_SPAWN].sync<T>(...argv);\n\t\t// @ts-ignore\n\t\tchild.then = Bluebird.method((fn) => {\n\t\t\t// @ts-ignore\n\t\t\tdelete child.then;\n\t\t\treturn fn(child)\n\t\t});\n\n\t\tlet [command, args, options] = argv;\n\n\t\tif (options && options.stripAnsi)\n\t\t{\n\t\t\t// @ts-ignore\n\t\t\tchild.stderr = child.stderr && CrossSpawnExtra.stripAnsi(child.stderr);\n\t\t\t// @ts-ignore\n\t\t\tchild.stdout = child.stdout && CrossSpawnExtra.stripAnsi(child.stdout);\n\t\t}\n\n\t\t// @ts-ignore\n\t\treturn child;\n\t}\n\n\t/**\n\t * async version of child_process.spawn(command[, args][, options])\n\t */\n\tasync<T = Buffer>(command: string, args?: string[], options?: SpawnOptions): SpawnASyncReturnsPromise<T>\n\tasync<T = Buffer>(command: string, args?: any[], options?: SpawnOptions): SpawnASyncReturnsPromise<T>\n\tasync<T = Buffer>(...argv): SpawnASyncReturnsPromise<T>\n\tasync<T = Buffer>(...argv): SpawnASyncReturnsPromise<T>\n\t{\n\t\tlet self = this;\n\n\t\tlet cache = {\n\t\t\toutput: [] as Buffer[],\n\t\t\tstdout: [] as Buffer[],\n\t\t\tstderr: [] as Buffer[],\n\t\t};\n\n\t\tlet child: SpawnASyncReturns<T>;\n\t\tlet fn = self[SYM_CROSS_SPAWN] as typeof CrossSpawn;\n\n\t\tlet ret = Bluebird.resolve();\n\n\t\tlet [command, args, options] = argv;\n\n\t\t// @ts-ignore\n\t\tchild = fn(...argv);\n\t\t// @ts-ignore\n\t\tret.child = child;\n\n\t\tchild.stderrStream = child.stderr;\n\t\tchild.stdoutStream = child.stdout;\n\n\t\t// @ts-ignore\n\t\tret = ret.thenReturn(new Bluebird<SpawnASyncReturns<T>>(function (resolve, reject)\n\t\t{\n\t\t\t// @ts-ignore\n\t\t\tret.child = child;\n\n\t\t\t[\n\t\t\t\t'stderr',\n\t\t\t\t'stdout',\n\t\t\t].forEach(function (std)\n\t\t\t{\n\t\t\t\tif (child[std])\n\t\t\t\t{\n\t\t\t\t\tchild[std].on('data', function (buf)\n\t\t\t\t\t{\n\t\t\t\t\t\tcache[std].push(buf);\n\t\t\t\t\t\tcache.output.push(buf);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tchild.on('close', function (...argv)\n\t\t\t{\n\t\t\t\tchild.status = argv[0];\n\n\t\t\t\tdone('close');\n\n\t\t\t\t//console.debug(child.pid, 'close', argv);\n\t\t\t});\n\n\t\t\tchild.on('exit', function (...argv)\n\t\t\t{\n\t\t\t\tchild.status = argv[0];\n\n\t\t\t\tdone('exit');\n\n\t\t\t\t//console.debug(child.pid, 'exit', argv);\n\t\t\t});\n\n\t\t\tchild.on('error', function (error)\n\t\t\t{\n\t\t\t\tchild.error = error;\n\t\t\t\t//done('error');\n\t\t\t});\n\n\t\t\tfunction done(event?: string)\n\t\t\t{\n\t\t\t\t//console.log(event, child.error);\n\n\t\t\t\tlet stderr = Buffer.concat(cache.stderr);\n\t\t\t\tlet stdout = Buffer.concat(cache.stdout);\n\n\t\t\t\tif (options && options.stripAnsi)\n\t\t\t\t{\n\t\t\t\t\tstderr = CrossSpawnExtra.stripAnsi(stderr);\n\t\t\t\t\tstdout = CrossSpawnExtra.stripAnsi(stdout);\n\t\t\t\t}\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tchild.stderr = stderr;\n\t\t\t\t// @ts-ignore\n\t\t\t\tchild.stdout = stdout;\n\t\t\t\t// @ts-ignore\n\t\t\t\tchild.output = [null, stdout, stderr];\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tchild._output = cache.output;\n\n\t\t\t\tif (child.error)\n\t\t\t\t{\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tchild.error.child = child;\n\t\t\t\t}\n\n\t\t\t\tif (child.error)\n\t\t\t\t{\n\t\t\t\t\treject(child.error);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresolve(child);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t\t.tapCatch((e: ISpawnASyncError<SpawnASyncReturns<T>>) => {\n\t\t\t\tif (e)\n\t\t\t\t{\n\t\t\t\t\te.child = child;\n\t\t\t\t}\n\t\t\t})\n\t\t)\n\t\t;\n\n\t\t// @ts-ignore\n\t\tret.child = child;\n\n\t\t// @ts-ignore\n\t\treturn ret;\n\t}\n\n\tspawnSync = this.sync;\n\tspawn = this.async;\n\n\t/**\n\t * create new CrossSpawnExtra with Custom CrossSpawn, Promise\n\t */\n\tconstructor(cs?: typeof CrossSpawn, p?: typeof Bluebird | typeof Promise)\n\t{\n\t\tsuper('async');\n\n\t\tthis[SYM_CROSS_SPAWN] = cs || CrossSpawn;\n\t\t// @ts-ignore\n\t\tthis[SYM_BLUEBIRD] = p || Bluebird;\n\n\t\t[\n\t\t\t'core',\n\t\t\t'async',\n\t\t\t'sync',\n\t\t].forEach(name => this[name] = this[name].bind(this));\n\n\t\tObject.defineProperty(this, \"__esModule\", { value: true });\n\t}\n\n\t/**\n\t * create new CrossSpawnExtra with Custom CrossSpawn, Promise\n\t */\n\tstatic use(cs?: typeof CrossSpawn, p?: typeof Bluebird | typeof Promise): CrossSpawnExtra\n\tstatic use<R = SpawnASyncReturnsPromise>(cs?: typeof CrossSpawn, p?: typeof Bluebird | typeof Promise): CrossSpawnExtra<R>\n\tstatic use(cs?, p?): CrossSpawnExtra\n\tstatic use<R = SpawnASyncReturnsPromise>(cs?, p?): CrossSpawnExtra<R>\n\tstatic use<R = SpawnASyncReturnsPromise>(cs?: typeof CrossSpawn, p?: typeof Bluebird | typeof Promise)\n\t{\n\t\treturn new this<R>(cs, p)\n\t}\n\n\t/**\n\t * create new CrossSpawnExtra with Custom CrossSpawn, Promise\n\t */\n\tuse(cs?: typeof CrossSpawn, p?: typeof Bluebird | typeof Promise): CrossSpawnExtra\n\tuse<R = SpawnASyncReturnsPromise>(cs?: typeof CrossSpawn, p?: typeof Bluebird | typeof Promise): CrossSpawnExtra<R>\n\tuse(cs?, p?): CrossSpawnExtra\n\tuse<R = SpawnASyncReturnsPromise>(cs?, p?): CrossSpawnExtra<R>\n\tuse<R = SpawnASyncReturnsPromise>(cs?: typeof CrossSpawn, p?: typeof Bluebird | typeof Promise)\n\t{\n\t\treturn new CrossSpawnExtra<R>(cs, p)\n\t}\n\n\tcore<T>(command: string, args?: string[], options?: SpawnOptions): child_process.ChildProcess\n\tcore<T>(...argv): child_process.ChildProcess\n\tcore<T>(...argv): child_process.ChildProcess\n\t{\n\t\t// @ts-ignore\n\t\treturn this[SYM_CROSS_SPAWN](...argv);\n\t}\n\n\tget coreSync()\n\t{\n\t\treturn this[SYM_CROSS_SPAWN].sync;\n\t}\n\n\t/**\n\t * stripAnsi a Buffer or string\n\t */\n\tstatic stripAnsi(input: Buffer, toStr: true): string\n\tstatic stripAnsi(input: Buffer, toStr?: boolean): Buffer\n\tstatic stripAnsi(input: string, toStr?: boolean): string\n\tstatic stripAnsi<T>(input: T, toStr: true): string\n\tstatic stripAnsi<T>(input: T, toStr?: boolean): T\n\tstatic stripAnsi(input: string | Buffer, toStr?: boolean)\n\t{\n\t\tif (!input)\n\t\t{\n\t\t\treturn input;\n\t\t}\n\n\t\tlet isBuffer = Buffer.isBuffer(input);\n\n\t\tinput = input.toString();\n\n\t\t// @ts-ignore\n\t\tinput = stripAnsi(input) as string;\n\n\t\tif (isBuffer && !toStr)\n\t\t{\n\t\t\treturn Buffer.from(input);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nexport default CrossSpawnExtra;\n"]}