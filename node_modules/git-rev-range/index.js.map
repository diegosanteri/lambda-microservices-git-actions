{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2018/5/14/014.\n */\n\nimport { gitlog, IOptions as IGitlogOptions, IReturnCommits } from 'gitlog2';\n\nexport const REVISION_DEFAULT = 'HEAD';\n\nexport interface IOptions\n{\n\tcwd?: string,\n\trealHash?: boolean,\n\tfullHash?: boolean,\n\tmaxNumber?: number,\n\n\texcludeStart?: boolean,\n\n\tgitlogOptions?: IGitlogOptions,\n}\nexport { IGitlogOptions }\n\nexport function isRevision(s: string)\n{\n\tif (!/^HEAD|^\\d+$/.test(s) && /^\\w{7,}$/.test(s))\n\t{\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nexport function revisionRangeData(from: number | string, to: string = 'HEAD', options: string | IOptions = {})\n{\n\tif (typeof from == 'number' || (((<IOptions>options).realHash || (<IOptions>options).fullHash) && (!isRevision(from) || !isRevision(to))))\n\t{\n\t\tif (typeof from == 'string' && !(<IOptions>options).excludeStart)\n\t\t{\n\t\t\tfrom = revisionBefore(from);\n\n\t\t\toptions = getOptions(options);\n\t\t\toptions.excludeStart = true;\n\t\t}\n\n\t\t({ from, to } = resolveRevision(from, to, options));\n\t}\n\n\treturn { from, to };\n}\n\nexport function revisionBefore(rev: string, n: number = 1)\n{\n\tif (typeof rev === 'number' || /^\\d{1,7}$/.test(rev))\n\t{\n\t\t//\n\t}\n\telse if (/~\\d+$/.test(rev))\n\t{\n\t\trev = rev.replace(/(~)(\\d+)$/, function (...m)\n\t\t{\n\t\t\treturn m[1] + (Number(m[2]) + n)\n\t\t});\n\t}\n\telse if (/^\\w+$/.test(rev))\n\t{\n\t\trev += '~' + n;\n\t}\n\n\treturn rev;\n}\n\nexport function revisionRange(from: number | string, to: string = 'HEAD', options: string | IOptions = {})\n{\n\t({ from, to } = revisionRangeData(from, to, options));\n\n\treturn `${from}..${to}`;\n}\n\nexport function resolveLog(from: number | string = 20, to: string = 'HEAD', options: string | IOptions = {}): IReturnCommits\n{\n\toptions = getOptions(options);\n\n\tif (typeof from == 'string')\n\t{\n\t\treturn gitlog({\n\t\t\t...options.gitlogOptions,\n\n\t\t\trepo: getCwd(options),\n\t\t\tbranch: revisionRange(from, to),\n\n\t\t\tnumber: (<IOptions>options).maxNumber || -1,\n\t\t});\n\t}\n\n\treturn gitlog({\n\t\t...options.gitlogOptions,\n\n\t\trepo: getCwd(options),\n\t\tnumber: from + 1,\n\t\tbranch: `${to}`,\n\t});\n}\n\nexport function resolveRevision(range: number | string, revision: string = 'HEAD', options: string | IOptions = {})\n{\n\trevision = revision || 'HEAD';\n\n\toptions = getOptions(options);\n\n\tlet a = resolveLog(range, revision, options);\n\n\tlet len = a.length;\n\n\tlet fromName = (typeof range == 'number' && len > 1) ? `${revision}~${len - 1}` : (typeof range == 'string' ? range : revision);\n\tlet toName = revision;\n\n\tlet from = fromName;\n\tlet to = toName;\n\n\tif (options && ((<IOptions>options).realHash || (<IOptions>options).fullHash))\n\t{\n\t\tif (a.length === 0)\n\t\t{\n\t\t\ta = gitlog({\n\n\t\t\t\t...options.gitlogOptions,\n\n\t\t\t\trepo: getCwd(options),\n\t\t\t\tbranch: to,\n\n\t\t\t\tnumber: 1,\n\t\t\t});\n\n\t\t\tlen = a.length;\n\t\t}\n\n\t\tif ((<IOptions>options).fullHash)\n\t\t{\n\t\t\tfrom = a[len - 1].hash;\n\t\t\tto = a[0].hash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfrom = a[len - 1].abbrevHash;\n\t\t\tto = a[0].abbrevHash;\n\t\t}\n\t}\n\n\treturn {\n\t\tfrom,\n\t\tto,\n\n\t\tfromName,\n\t\ttoName,\n\n\t\tlength: a.length,\n\t};\n}\n\nexport function getOptions(cwd?: string | IOptions): IOptions\n{\n\tif (typeof cwd == 'string')\n\t{\n\t\treturn {\n\t\t\tcwd,\n\t\t};\n\t}\n\n\treturn cwd;\n}\n\nexport function getCwd(cwd?: string | IOptions)\n{\n\treturn cwd && (typeof cwd == 'string' ? cwd : (<IOptions>cwd).cwd) || process.cwd();\n}\n\nexport default exports as typeof import('./index');\n"]}