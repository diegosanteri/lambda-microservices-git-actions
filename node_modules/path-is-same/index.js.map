{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;AAAA,mCAAkC;AAClC,2BAAkC;AAElC,SAAgB,WAAW,CAAC,EAAU,EAAE,EAAU;IAEjD,OAAO,IAAA,iBAAQ,EAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,CAAA;AAC/B,CAAC;AAHD,kCAGC;AAED,SAAgB,gBAAgB,CAAC,EAAU,EAAE,GAAG,EAAY;IAE3D,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,EAClB;QACC,MAAM,IAAI,SAAS,CAAC,oBAAoB,CAAC,CAAA;KACzC;AACF,CAAC;AAND,4CAMC;AAGD,SAAgB,cAAc,CAAC,EAAU,EAAE,GAAG,EAAY;;IAEzD,gBAAgB,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;IAE5B,IAAI,CAAC,CAAA,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,MAAM,CAAA,IAAI,CAAC,CAAA,MAAA,EAAE,CAAC,CAAC,CAAC,0CAAE,MAAM,CAAA,EACjC;QACC,OAAO,KAAK,CAAA;KACZ;IAED,EAAE,GAAG,IAAA,iBAAY,EAAC,EAAE,CAAC,CAAC;IAEtB,OAAO,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;QAGpB,IACA;YACC,EAAE,GAAG,IAAA,iBAAY,EAAC,EAAE,CAAC,CAAC;SACtB;QACD,OAAO,CAAC,EACR;YACC,OAAO,KAAK,CAAA;SACZ;QAED,OAAO,WAAW,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAA;AACH,CAAC;AAzBD,wCAyBC;AAGD,SAAgB,UAAU,CAAC,EAAU,EAAE,GAAG,EAAY;;IAErD,gBAAgB,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;IAE5B,IAAI,CAAC,CAAA,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,MAAM,CAAA,IAAI,CAAC,CAAA,MAAA,EAAE,CAAC,CAAC,CAAC,0CAAE,MAAM,CAAA,EACjC;QACC,OAAO,KAAK,CAAA;KACZ;IAED,OAAO,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAA;AAC3C,CAAC;AAVD,gCAUC;AAED,kBAAe,UAAU,CAAA","sourcesContent":["import { relative } from 'upath2';\nimport { realpathSync } from 'fs';\n\nexport function _pathIsSame(p1: string, p2: string): boolean\n{\n\treturn relative(p1, p2) === ''\n}\n\nexport function _assertInputArgv(p1: string, ...ps: string[])\n{\n\tif (ps.length <= 0)\n\t{\n\t\tthrow new TypeError(`p2 must be provide`)\n\t}\n}\n\nexport function fsSameRealpath(p1: string, p2: string, ...ps: string[]): boolean\nexport function fsSameRealpath(p1: string, ...ps: string[]): boolean\n{\n\t_assertInputArgv(p1, ...ps);\n\n\tif (!p1?.length || !ps[0]?.length)\n\t{\n\t\treturn false\n\t}\n\n\tp1 = realpathSync(p1);\n\n\treturn ps.every(p2 =>\n\t{\n\n\t\ttry\n\t\t{\n\t\t\tp2 = realpathSync(p2);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn false\n\t\t}\n\n\t\treturn _pathIsSame(p1, p2);\n\t})\n}\n\nexport function pathIsSame(p1: string, p2: string, ...ps: string[]): boolean\nexport function pathIsSame(p1: string, ...ps: string[]): boolean\n{\n\t_assertInputArgv(p1, ...ps);\n\n\tif (!p1?.length || !ps[0]?.length)\n\t{\n\t\treturn false\n\t}\n\n\treturn ps.every(p2 => _pathIsSame(p1, p2))\n}\n\nexport default pathIsSame\n"]}