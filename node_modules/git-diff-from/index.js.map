{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2018/5/14/014.\n */\n\nimport { resolveRevision, revisionRange, getCwd, revisionRangeData, IOptions as IGitRevRangeOptions } from 'git-rev-range';\nimport { join, relative, resolve } from 'upath2';\nimport { crlf, chkcrlf, LF, CRLF, CR } from 'crlf-normalize';\nimport { gitRoot } from 'git-root2/core';\nimport { decode, decode2 } from 'git-decode';\nimport { crossSpawnGitSync } from '@git-lazy/spawn';\n\nexport interface IOptions\n{\n\tencoding?: string,\n\tcwd?: string,\n}\n\nexport const defaultOptions: IOptions = {\n\tencoding: 'UTF-8',\n};\n\nexport interface IGitDiffFromRow\n{\n\tstatus: string,\n\tpath: string,\n\tfullpath: string,\n}\n\nexport type IGitDiffFrom = Array<IGitDiffFromRow> & {\n\tfrom: string,\n\tto: string,\n\tcwd: string,\n\troot: string,\n\tfiles: string[],\n}\n\n/**\n * git diff-tree -r --no-commit-id --name-status --encoding=UTF-8  HEAD~1 HEAD\n */\n// @ts-ignore\nexport function gitDiffFrom(from: string | number, options?: IOptions): IGitDiffFrom\nexport function gitDiffFrom(from: string | number, to: string, options?: IOptions): IGitDiffFrom\nexport function gitDiffFrom(from: string | number = 'HEAD', to: string | any = 'HEAD', options: IOptions = {})\n{\n\tif (typeof to === 'object' && to !== null)\n\t{\n\t\t[options, to] = [to, 'HEAD'];\n\t}\n\n\toptions = Object.assign({}, defaultOptions, options);\n\n\tlet cwd = getCwd(options.cwd);\n\tlet root = gitRoot(cwd) as string;\n\n\tif (!root)\n\t{\n\t\tthrow new RangeError(`no exists git at ${cwd}`);\n\t}\n\n\tlet opts2: IGitRevRangeOptions = {\n\t\tcwd,\n\t\trealHash: true,\n\t\tgitlogOptions: {\n\t\t\tfirstParent: true,\n\t\t\tdisplayFilesChangedDuringMerge: true,\n\t\t},\n\t};\n\n\t({ from, to } = revisionRangeData(from, to, opts2));\n\n\tlet files: string[] = [];\n\tlet list: {\n\t\tstatus: string,\n\t\tpath: string,\n\t\tfullpath: string,\n\t}[] = [];\n\n\tif (from != to)\n\t{\n\t\tlet log = crossSpawnGitSync('git', filterArgv([\n\t\t\t...'diff-tree -r --no-commit-id --name-status'.split(' '),\n\t\t\t`--encoding=${options.encoding}`,\n\t\t\trevisionRange(from, to, opts2),\n\t\t]), {\n\t\t\t//stdio: 'inherit',\n\t\t\tcwd,\n\t\t\tstripAnsi: true,\n\t\t});\n\n\t\tif (log.error || log.stderr.length)\n\t\t{\n\t\t\tthrow new Error(log.stderr.toString())\n\t\t}\n\n\t\tlist = crlf(log.stdout.toString())\n\t\t\t.split(LF)\n\t\t\t.reduce(function (a, line)\n\t\t\t{\n\t\t\t\tline = line.replace(/^\\s+/g, '');\n\n\t\t\t\tif (line)\n\t\t\t\t{\n\t\t\t\t\tlet [status, file] = line.split(/\\t/);\n\n\t\t\t\t\t/**\n\t\t\t\t\t * 沒有正確回傳 utf-8 而是變成編碼化\n\t\t\t\t\t */\n\t\t\t\t\tfile = decode2(file);\n\n\t\t\t\t\tlet fullpath = join(root, file);\n\t\t\t\t\tfile = relative(root, fullpath);\n\n\t\t\t\t\tlet row = {\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tpath: file,\n\t\t\t\t\t\tfullpath,\n\t\t\t\t\t};\n\n\t\t\t\t\tfiles.push(file);\n\n\t\t\t\t\ta.push(row)\n\t\t\t\t}\n\n\t\t\t\treturn a;\n\t\t\t}, [])\n\t\t;\n\t}\n\n\tcwd = resolve(cwd);\n\troot = resolve(root);\n\n\treturn Object.assign(list, {\n\t\tfrom,\n\t\tto,\n\t\tcwd,\n\t\troot,\n\t\tfiles,\n\t});\n}\n\nexport function filterArgv(argv: string[])\n{\n\treturn argv.filter(function (v)\n\t{\n\t\treturn v !== null && v !== ''\n\t});\n}\n\nexport default gitDiffFrom;\n"]}