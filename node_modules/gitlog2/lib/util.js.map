{"version":3,"file":"util.js","sourceRoot":"","sources":["util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by user on 2019/1/6/006.\n */\n\nimport { array_unique } from 'array-hyper-unique';\nimport debug0 from 'debug';\nimport { existsSync } from \"fs\";\nimport { decode as _decode } from 'git-decode';\nimport {\n\tdefaultOptions,\n\tdelimiter, EnumFileStatus, EnumPrettyFormatFlags, EnumPrettyFormatMark,\n\tfields,\n\tICommands, IFieldsArray,\n\tIOptions, IOptionsGitFlogs, IOptionsGitWithValue, IOptionsGitFlogsExtra,\n\tIParseCommit,\n\tIReturnCommits,\n\tKEY_ORDER,\n\tnotOptFields,\n} from './type';\nimport extend from 'lodash.assign';\nimport _decamelize from 'decamelize';\nimport { sortObjectKeys } from 'sort-object-keys2';\nimport { SpawnSyncOptions, SpawnSyncReturns } from 'cross-spawn-extra/core';\nimport { LF } from 'crlf-normalize';\nimport { GitExecMaxBuffer } from '@git-lazy/const';\nimport { crossSpawnOutput } from '@lazy-spawn/stringify';\n\nexport const debug = debug0('gitlog');\n\nexport function handleOptions(options: IOptions)\n{\n\t// lazy name\n\tconst REPO = (options.repo && options.repo != null) ? options.repo : options.cwd;\n\n\tif (!REPO) throw new Error(`Repo required!, but got \"${REPO}\"`);\n\tif (!existsSync(REPO)) throw new Error(`Repo location does not exist: \"${REPO}\"`);\n\n\tlet defaultExecOptions: SpawnSyncOptions = {\n\t\tcwd: REPO,\n\t\tstripAnsi: true,\n\t};\n\n\t// Set defaults\n\toptions = extend({}, defaultOptions, { execOptions: defaultExecOptions }, options);\n\toptions.execOptions = extend(options.execOptions, defaultExecOptions);\n\n\toptions.execOptions.maxBuffer ??= GitExecMaxBuffer;\n\n\tif (options.returnAllFields)\n\t{\n\t\toptions.fields = [].concat(Object.keys(fields));\n\n\t\tif (options.nameStatus && typeof options.nameStatusFiles == 'undefined')\n\t\t{\n\t\t\toptions.nameStatusFiles = true;\n\t\t}\n\t}\n\n\treturn options;\n}\n\nexport function buildCommands(options: IOptions): {\n\tbin: string,\n\tcommands: ICommands,\n}\n{\n\t// Start constructing command\n\n\tlet bin = 'git';\n\tlet commands: ICommands = [\n\t\t'log',\n\t];\n\n\tcommands = addFlagsBool(commands, options, [\n\t\t'findCopiesHarder',\n\t\t'all',\n\t]);\n\n\tif (options.number > 0)\n\t{\n\t\tcommands.push('-n', options.number);\n\t}\n\n\tcommands = addFlagsBool(commands, options, [\n\t\t'noMerges',\n\t\t'firstParent',\n\t]);\n\n\tif (options.displayFilesChangedDuringMerge)\n\t{\n\t\tcommands.push('-m');\n\t}\n\n\tcommands = addOptional(commands, options);\n\n\tcommands = addPrettyFormat(commands, options, EnumPrettyFormatFlags.PRETTY);\n\n\t// Append branch (revision range) if specified\n\tif (options.branch)\n\t{\n\t\tcommands.push(options.branch);\n\t}\n\n\t//File and file status\n\tcommands = addFlagsBool(commands, options, [\n\t\t'nameStatus',\n\t\t'merges',\n\t\t'fullHistory',\n\t\t'sparse',\n\t\t'simplifyMerges',\n\t]);\n\n\tif (options.file || options.files && options.files.length)\n\t{\n\t\tlet ls = [options.file].concat(options.files || []).filter(v => v != null);\n\n\t\tif (!ls.length)\n\t\t{\n\t\t\tthrow new TypeError(`file list is empty`);\n\t\t}\n\n\t\tcommands = addFlagsBool(commands, options, [\n\t\t\t'follow',\n\t\t]);\n\n\t\tcommands.push('--', ...ls);\n\t}\n\telse if (options.follow)\n\t{\n\t\tthrow new TypeError(`options.follow works only for a single file`)\n\t}\n\n\tdebug('command', options.execOptions, commands);\n\n\treturn { bin, commands }\n}\n\nexport function addPrettyFormat(commands: ICommands, options: IOptions, flagName = EnumPrettyFormatFlags.PRETTY)\n{\n\t// Start of custom format\n\t// Iterating through the fields and adding them to the custom format\n\tlet command = options.fields.reduce(function (command, field)\n\t\t{\n\t\t\tif (!fields[field] && notOptFields.indexOf(field) === -1) throw new RangeError('Unknown field: ' + field);\n\n\t\t\tcommand.push(EnumPrettyFormatMark.DELIMITER + fields[field]);\n\n\t\t\treturn command;\n\t\t}, [`${toFlag(flagName)}=${EnumPrettyFormatMark.BEGIN}`])\n\t\t.concat([EnumPrettyFormatMark.END])\n\t\t.join(EnumPrettyFormatMark.JOIN);\n\n\tcommands.push(command);\n\n\treturn commands\n}\n\nexport function decode(file: string): string\n{\n\tif (file.indexOf('\"') == 0 || file.match(/(?:\\\\(\\d{3}))/))\n\t{\n\t\tfile = file.replace(/^\"|\"$/g, '');\n\n\t\tfile = _decode(file);\n\t}\n\n\treturn file;\n}\n\nexport function decamelize(key: string): string\n{\n\treturn _decamelize(key, { separator: '-' })\n}\n\nexport function toFlag(key: string)\n{\n\treturn '--' + decamelize(key);\n}\n\nexport function addFlagsBool(commands: ICommands, options: IOptions, flagNames: (keyof IOptionsGitFlogs)[])\n{\n\tfor (let k of flagNames)\n\t{\n\t\tif (options[k])\n\t\t{\n\t\t\tcommands.push(toFlag(k))\n\t\t}\n\t}\n\n\treturn commands\n}\n\n/***\n Add optional parameter to command\n */\nexport function addOptional(commands: ICommands, options: IOptions)\n{\n\tlet cmdOptional: (keyof IOptionsGitWithValue)[] = [\n\t\t'author',\n\t\t'since',\n\t\t'after',\n\t\t'until',\n\t\t'before',\n\t\t'committer',\n\t\t'skip',\n\t];\n\tfor (let k of cmdOptional)\n\t{\n\t\tif (options[k])\n\t\t{\n\t\t\tcommands.push(`--${k}=${options[k]}`)\n\t\t}\n\t}\n\treturn commands\n}\n\nexport function parseCommitFields(parsed: IParseCommit, commitField: string, index: number, fields: IFieldsArray)\n{\n\tlet key = fields[index];\n\n\tswitch (key)\n\t{\n\t\tcase 'tags':\n\t\t\tlet tags = [];\n\t\t\tlet start = commitField.indexOf('tag: ');\n\t\t\tif (start >= 0)\n\t\t\t{\n\t\t\t\tcommitField\n\t\t\t\t\t.substr(start + 5)\n\t\t\t\t\t.trim()\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.forEach(function (tag)\n\t\t\t\t\t{\n\t\t\t\t\t\ttags.push(tag.trim());\n\t\t\t\t\t})\n\t\t\t\t;\n\t\t\t}\n\t\t\tparsed[key] = tags;\n\t\t\tbreak;\n\t\tcase 'authorDateUnixTimestamp':\n\t\tcase 'committerDateUnixTimestamp':\n\t\t\tparsed[key] = parseInt(commitField);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// @ts-ignore\n\t\t\tparsed[key] = commitField;\n\t\t\tbreak;\n\t}\n\n\treturn parsed;\n}\n\nexport function parseCommits(commits: string[], options: IOptions): IReturnCommits\n{\n\tlet { fields, nameStatus } = options;\n\n\treturn commits.map(function (_commit, _index)\n\t{\n\t\t//console.log(_commit);\n\n\t\tlet parts = _commit.split(EnumPrettyFormatMark.END);\n\n\t\tlet commit = parts[0].split(delimiter);\n\n\t\tlet nameStatusFiles: IParseCommit[\"fileStatus\"] = [];\n\n\t\tif (parts[1])\n\t\t{\n\t\t\tlet parseNameStatus = parts[1].trimLeft().split(LF);\n\n\t\t\t// Removes last empty char if exists\n\t\t\tif (parseNameStatus[parseNameStatus.length - 1] === '')\n\t\t\t{\n\t\t\t\tparseNameStatus.pop()\n\t\t\t}\n\n\t\t\tparseNameStatus = parseNameStatus\n\t\t\t\t// Split each line into it's own delimitered array\n\t\t\t\t.map(function (d, i)\n\t\t\t\t{\n\t\t\t\t\treturn d.split(delimiter);\n\t\t\t\t})\n\t\t\t\t// 0 will always be status, last will be the filename as it is in the commit,\n\t\t\t\t// anything inbetween could be the old name if renamed or copied\n\t\t\t\t.reduce(function (a, b)\n\t\t\t\t{\n\t\t\t\t\tlet tempArr: [EnumFileStatus, string] = [b[0] as EnumFileStatus, b[b.length - 1]];\n\n\t\t\t\t\ttempArr[1] = decode(tempArr[1]);\n\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tnameStatusFiles.push(tempArr);\n\n\t\t\t\t\t// If any files in between loop through them\n\t\t\t\t\tfor (let i = 1, len = b.length - 1; i < len; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t// If status R then add the old filename as a deleted file + status\n\t\t\t\t\t\t// Other potentials are C for copied but this wouldn't require the original deleting\n\t\t\t\t\t\tif (b[0].slice(0, 1) === EnumFileStatus.RENAMED)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttempArr.push(EnumFileStatus.DELETED, b[i]);\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tnameStatusFiles.push([EnumFileStatus.DELETED, decode(b[i])]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn a.concat(tempArr);\n\t\t\t\t}, [])\n\t\t\t;\n\n\t\t\tcommit = commit.concat(parseNameStatus)\n\t\t}\n\n\t\tdebug('commit', commit);\n\n\t\t// Remove the first empty char from the array\n\t\tcommit.shift();\n\n\t\tlet parsed: IParseCommit = {\n\t\t\t_index,\n\t\t};\n\n\t\tif (nameStatus)\n\t\t{\n\t\t\t// Create arrays for non optional fields if turned on\n\t\t\tnotOptFields.forEach(function (d)\n\t\t\t{\n\t\t\t\tparsed[d] = [];\n\t\t\t})\n\t\t}\n\n\t\tcommit.forEach(function (commitField, index)\n\t\t{\n\t\t\tif (fields[index])\n\t\t\t{\n\t\t\t\tparsed = parseCommitFields(parsed, commitField, index, fields);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (nameStatus)\n\t\t\t\t{\n\t\t\t\t\tlet pos = (index - fields.length) % notOptFields.length;\n\n\t\t\t\t\tdebug('nameStatus', (index - fields.length), notOptFields.length, pos, commitField);\n\t\t\t\t\tparsed[notOptFields[pos]].push(commitField)\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (nameStatus && options.nameStatusFiles)\n\t\t{\n\t\t\tparsed.fileStatus = array_unique(nameStatusFiles) as typeof nameStatusFiles;\n\t\t}\n\n\t\t// @ts-ignore\n\t\tparsed = sortObjectKeys(parsed, KEY_ORDER);\n\n\t\treturn parsed\n\t})\n}\n\nexport function parseCommitsStdout(options: IOptions, stdout: SpawnSyncReturns[\"output\"] | Buffer): IReturnCommits\n{\n\tlet str: string;\n\n\tdebug('stdout', stdout);\n\n\tif (options.fnHandleBuffer)\n\t{\n\t\tstr = options.fnHandleBuffer(stdout)\n\t}\n\telse\n\t{\n\t\tstr = crossSpawnOutput(stdout)\n\t}\n\n\t//console.log(str);\n\n\tlet commits: unknown[] = str.split(EnumPrettyFormatMark.BEGIN);\n\tif (commits[0] === '')\n\t{\n\t\tcommits.shift()\n\t}\n\tdebug('commits', commits);\n\n\tcommits = parseCommits(commits as string[], options);\n\n\tdebug('commits:parsed', commits);\n\n\treturn commits as IReturnCommits;\n}\n\nexport interface IAsyncCallback<E = ReturnType<typeof createError>>\n{\n\t(error: E, commits: IReturnCommits): void,\n\n\t(error: never, commits: IReturnCommits): void,\n}\n\nexport function createError<D extends any, E extends Error>(message?, data?: D, err?: {\n\tnew(): E,\n\tnew(...argv): E,\n}): E & {\n\tdata: D,\n}\n{\n\t// @ts-ignore\n\terr = err || Error;\n\n\tlet e = message instanceof Error ? message : new err(message);\n\n\t// @ts-ignore\n\te.data = data;\n\n\t// @ts-ignore\n\treturn e;\n}\n"]}