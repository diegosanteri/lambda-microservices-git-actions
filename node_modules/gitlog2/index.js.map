{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;;;AACA,qCAWoB;AAcmE,+FAxBtF,qBAAc,OAwBsF;AAA5F,kGAvBR,wBAAiB,OAuBQ;AAA8C,8FAfvE,oBAAa,OAeuE;AAbrF,qCAQoB;AACpB,gEAAgC;AAEhC,2CAAwE;AAQxE,SAAgB,MAAM,CAAC,OAAiB,EAAE,EAAmB;IAE5D,OAAO,GAAG,IAAA,oBAAa,EAAC,OAAO,CAAC,CAAC;IACjC,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAA,oBAAa,EAAC,OAAO,CAAC,CAAC;IAE/C,IAAI,CAAC,EAAE,EACP;QACC,WAAW;QACX,OAAO,IAAA,yBAAkB,EAAC,OAAO,EAAE,IAAA,yBAAiB,EAAC,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAC,WAAkB,CAAC,CAAC,MAAa,CAAC,CAAA;KAC9G;IAED,OAAO,IAAA,0BAAkB,EAAC,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAC,WAAkB,CAAC;SAClE,IAAI,CAAC,UAAU,KAAK;QAEpB,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;QAEtC,IAAI,OAAO,GAAG,IAAA,yBAAkB,EAAC,OAAO,EAAE,MAAa,CAAC,CAAC;QAEzD,IAAI,GAAG,GAAG,MAAM,IAAI,MAAM,CAAC,QAAQ,EAAE,IAAI,KAAK,IAAI,IAAI,CAAC;QAEvD,IAAI,GAAG,EACP;YACC,IAAI,CAAC,GAAG,IAAA,kBAAW,EAAC,GAAG,EAAE;gBACxB,GAAG;gBACH,QAAQ;gBACR,KAAK;gBACL,OAAO;aACP,CAAC,CAAC;YAEH,OAAO,kBAAQ,CAAC,MAAM,CAAC,GAAG,CAAC;iBACzB,QAAQ,CAAC;gBAET,OAAO,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAA;YACtB,CAAC,CAAC,CACD;SACF;aAED;YACC,OAAO,kBAAQ,CAAC,OAAO,CAAC,OAAO,CAAC;iBAC9B,GAAG,CAAC;gBAEJ,OAAO,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;YACzB,CAAC,CAAC,CAAA;SACH;IACF,CAAC,CAAC,CACD;AACH,CAAC;AA9CD,wBA8CC;AAED,WAAiB,MAAM;IAEtB;;OAEG;IACH,SAAgB,IAAI,CAAC,OAAiB;QAErC,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC;IACxB,CAAC;IAHe,WAAI,OAGnB,CAAA;IAED;;;OAGG;IACH,SAAgB,aAAa,CAAC,OAAiB,EAAE,EAAkB;QAElE,IAAI,OAAO,EAAE,KAAK,UAAU,EAC5B;YACC,MAAM,IAAI,SAAS,CAAC,yBAAyB,CAAC,CAAC;SAC/C;QAED,aAAa;QACb,OAAO,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC5B,CAAC;IATe,oBAAa,gBAS5B,CAAA;IAED;;OAEG;IACH,SAAgB,KAAK,CAAC,OAAiB;QAEtC,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAE9B;;;;;;;;;;;;;;;UAeE;IACH,CAAC;IApBe,YAAK,QAoBpB,CAAA;IAED;;OAEG;IACH,SAAS,KAAK,KAAI,CAAC;IAEN,wBAAiB,GAAG,wBAAkB,CAAA;AACpD,CAAC,EAxDgB,MAAM,GAAN,cAAM,KAAN,cAAM,QAwDtB;AAEa,QAAA,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AACnB,QAAA,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;AACrC,QAAA,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AAEnC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;AACvB,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;AAExB,kBAAe,MAAM,CAAA","sourcesContent":["import { existsSync } from 'fs';\nimport {\n\tdefaultOptions,\n\tEnumGitDateFormat,\n\tEnumGitDateFormat as _EnumGitDateFormat,\n\tfields,\n\tIOptions, IOptionsGitFlogs, IOptionsGitWithValue, IOptionsGitFlogsExtra,\n\tIParseCommit,\n\tIReturnCommits,\n\tIFieldsArray,\n\tICommands, notOptFields, delimiter,\n\tdefaultFields,\n} from './lib/type';\nimport {\n\taddOptional,\n\tdebug,\n\tIAsyncCallback,\n\tparseCommits,\n\tparseCommitsStdout,\n\thandleOptions,\n\tbuildCommands, createError,\n} from './lib/util';\nimport Bluebird from 'bluebird';\nimport extend from 'lodash.assign';\nimport { crossSpawnGitSync, crossSpawnGitAsync } from '@git-lazy/spawn';\n\nexport { EnumGitDateFormat, IReturnCommits, IParseCommit, IFieldsArray, defaultFields, defaultOptions }\nexport { IOptions, IOptionsGitFlogs, IOptionsGitWithValue, IOptionsGitFlogsExtra, }\n\nexport function gitlog(options: IOptions): IParseCommit[]\nexport function gitlog(options: IOptions, cb: IAsyncCallback): Bluebird<IParseCommit[]>\nexport function gitlog(options: IOptions, cb?: IAsyncCallback): IParseCommit[] | Bluebird<IParseCommit[]>\nexport function gitlog(options: IOptions, cb?: IAsyncCallback): IParseCommit[] | Bluebird<IParseCommit[]>\n{\n\toptions = handleOptions(options);\n\tlet { bin, commands } = buildCommands(options);\n\n\tif (!cb)\n\t{\n\t\t// run Sync\n\t\treturn parseCommitsStdout(options, crossSpawnGitSync(bin, commands, options.execOptions as any).stdout as any)\n\t}\n\n\treturn crossSpawnGitAsync(bin, commands, options.execOptions as any)\n\t\t.then(function (child)\n\t\t{\n\t\t\tlet { stdout, stderr, error } = child;\n\n\t\t\tlet commits = parseCommitsStdout(options, stdout as any);\n\n\t\t\tlet err = stderr && stderr.toString() || error || null;\n\n\t\t\tif (err)\n\t\t\t{\n\t\t\t\tlet e = createError(err, {\n\t\t\t\t\tbin,\n\t\t\t\t\tcommands,\n\t\t\t\t\tchild,\n\t\t\t\t\tcommits,\n\t\t\t\t});\n\n\t\t\t\treturn Bluebird.reject(err)\n\t\t\t\t\t.tapCatch(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\treturn cb(e, commits)\n\t\t\t\t\t})\n\t\t\t\t\t;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn Bluebird.resolve(commits)\n\t\t\t\t\t.tap(function ()\n\t\t\t\t\t{\n\t\t\t\t\t\treturn cb(null, commits)\n\t\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\t;\n}\n\nexport namespace gitlog\n{\n\t/**\n\t * this method can make sure u are use sync mode\n\t */\n\texport function sync(options: IOptions)\n\t{\n\t\treturn gitlog(options);\n\t}\n\n\t/**\n\t * allow `await` when use `callback` mode,\n\t * but remember u can't change `return value` when use `callback`\n\t */\n\texport function asyncCallback(options: IOptions, cb: IAsyncCallback)\n\t{\n\t\tif (typeof cb !== 'function')\n\t\t{\n\t\t\tthrow new TypeError(`expected cb as function`);\n\t\t}\n\n\t\t// @ts-ignore\n\t\treturn gitlog(options, cb);\n\t}\n\n\t/**\n\t * async Promise mode\n\t */\n\texport function async(options: IOptions)\n\t{\n\t\treturn gitlog(options, dummy);\n\n\t\t/*\n\t\treturn new Bluebird<IReturnCommits>(function (resolve, reject)\n\t\t{\n\t\t\tgitlog(options, function (error, commits)\n\t\t\t{\n\t\t\t\tif (error)\n\t\t\t\t{\n\t\t\t\t\treject(error)\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresolve(commits)\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\t*/\n\t}\n\n\t/**\n\t * for trigger async Promise mode\n\t */\n\tfunction dummy() {}\n\n\texport const EnumGitDateFormat = _EnumGitDateFormat\n}\n\nexport import sync = gitlog.sync;\nexport import asyncCallback = gitlog.asyncCallback;\nexport import async = gitlog.async;\n\ngitlog.gitlog = gitlog;\ngitlog.default = gitlog;\n\nexport default gitlog\n"]}