{"version":3,"file":"util.js","sourceRoot":"","sources":["util.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAGH,qDAAqE;AAA5D,uGAAA,cAAc,OAAa;AAEpC,SAAgB,kBAAkB,CAA8B,EAAW;IAE1E,OAAO,EAAE,CAAC,KAAK;QACd,aAAa;WACV,EAAE,CAAC,eAAe,CACpB;AACH,CAAC;AAND,gDAMC;AAED,SAAgB,oBAAoB,CAAoB,IAAS,EAAE,EAA0B;IAE5F,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,KAAQ,EAAE,EAAE,CAAC,OAAO,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC;IAE1E,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC;AALD,oDAKC","sourcesContent":["/**\n * Created by user on 2020/5/27.\n */\n\nimport { CrossSpawnExtra, ISpawnASyncError, SpawnASyncReturns } from 'cross-spawn-extra/core';\nexport { stripAnsiValue as stripAnsi } from '@lazy-spawn/strip-ansi';\n\nexport function getCrossSpawnError<T extends SpawnASyncReturns>(cp: T | any): ISpawnASyncError<T>\n{\n\treturn cp.error\n\t\t// @ts-ignore\n\t\t|| cp.errorCrossSpawn\n\t\t;\n}\n\nexport function filterCrossSpawnArgv<T extends unknown>(args: T[], fn?: (value: T) => boolean)\n{\n\tfn = fn || ((value: T) => typeof value !== 'undefined' && value !== null);\n\n\treturn args.filter(fn);\n}\n"]}